<?php

namespace AppBundle\Repository;

use AppBundle\Entity\FilterQuery;

/**
 * AttractionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttractionRepository extends \Doctrine\ORM\EntityRepository
{
    public function findFromFilterQuery(
        FilterQuery $filterQuery,
        array $multipleCriterias,
        array $singleCriterias
    ) : array
    {
        #the rest of the query will be completed in the loop
        $query = $this->createQueryBuilder('att')->select('att.id');

        #each field whose name is in $multipleCriterias[] is an array of entities
        #
        foreach ($multipleCriterias as $key => $info) {
            # â†“ indirect field access
            $array = $filterQuery->$key;

            if (isset($array) && (0 != count($array))) {

                $field = $info['field'];
                $alias = $info['alias'];

                $query->join('att.' . $field, $alias);
                $expr = $query->expr();

                #We are building a WHERE ( name = x OR name = y OR ... ) AND ...
                $orCond = $expr ->orX();

                ## AND for the first item of the loop,
                ## OR for the others : Doctrine will treat them as AND( ... OR ... )
                foreach( $array as $entity ) {
                    $orCond->add(
                        $expr->eq(
                            $alias . '.name',
                            $expr->literal($entity->getName())
                        )
                    );
                }

                $query->andWhere( $orCond );
            }
        }


/*            foreach (self::SINGLE_CRITERIAS as $key) {
            if (isset($query->$key)) {
                $criterias->andWhere($expr->eq($key, $query->$key));
            }
        }*/

#TODO: the correct method is to use a custom hydratator:
        # see  https://stackoverflow.com/questions/11657835/how-to-get-a-one-dimensional-scalar-array-as-a-doctrine-dql-query-result
        return array_column($query->getQuery()->getScalarResult(), 'id');
    }
}
